// middleware/logAction.js - FINAL ROBUST VERSION
import mongoose from "mongoose";
import Log from "../models/Log.js";
import Notification from "../models/Notification.js";
import User from "../models/User.js";

/**
 * Logs a user/system action and triggers optional notifications.
 * Safe for unauthenticated routes (e.g., password reset, register, etc.)
 */
export const logAction = (action, resourceType) => {
  return async (req, res, next) => {
    const originalSend = res.send;

    res.send = function (data) {
      // Only log successful responses
      if (res.statusCode >= 200 && res.statusCode < 300) {
        const validUserId =
          req.user && mongoose.isValidObjectId(req.user._id)
            ? req.user._id
            : null; // ✅ null instead of "system" to avoid ObjectId casting error

        // Async log creation
        Log.create({
          userId: validUserId,
          userName: req.user?.name || "System",
          userEmail: req.user?.email || "system@lfc.com",
          action,
          resource: resourceType,
          details: `${action} ${resourceType}`,
          resourceId: req.params.courseId || req.params.id || req.body._id,
          ipAddress: req.ip,
          userAgent: req.get("User-Agent"),
          status: "success",
          timestamp: new Date(),
        })
          .then(async (log) => {
            await createNotificationFromLog(log, req);
          })
          .catch((error) => {
            console.warn("⚠️ Failed to log action:", error.message);
          });
      }

      return originalSend.call(this, data);
    };

    next();
  };
};

/**
 * Generates automatic notifications based on logged actions.
 */
const createNotificationFromLog = async (log, req) => {
  try {
    let notificationData = {};

    switch (log.action) {
      case "enroll":
        notificationData = {
          userId: log.userId,
          title: "Enrolled in a new course",
          message: "You have been enrolled in a new course",
          type: "course",
          link: `/courses/${log.resourceId}`,
          autoGenerated: true,
        };
        break;

      case "submit":
        notificationData = {
          userId: log.userId,
          title: "Submission received",
          message: "Your assignment submission has been received",
          type: "submission",
          link: `/admin/submissions/${log.resourceId}`,
          autoGenerated: true,
        };
        break;

      case "grade":
        notificationData = {
          userId: log.details?.studentId || req.body?.studentId,
          title: "Assignment graded",
          message: "Your assignment has been graded",
          type: "grade",
          link: `/courses/${log.details?.courseId || req.body?.courseId}/assignments/${log.resourceId}`,
          autoGenerated: true,
        };
        break;

      case "create":
        if (log.resource === "course") {
          const admins = await User.find({
            role: { $in: ["admin", "admin-only"] },
          }).select("_id");

          await Promise.all(
            admins.map((admin) =>
              Notification.create({
                userId: admin._id,
                title: "New course created",
                message: `New course: ${log.details?.title || req.body?.title || "Untitled"}`,
                type: "course",
                link: `/admin/courses/${log.resourceId}`,
                autoGenerated: true,
              })
            )
          );
          return;
        }
        break;

      case "update":
        notificationData = {
          userId: log.userId,
          title: `${log.resource} updated`,
          message: `Your ${log.resource} has been updated`,
          type: log.resource,
          link: `/${log.resource}s/${log.resourceId}`,
          autoGenerated: true,
        };
        break;

      case "delete":
        notificationData = {
          userId: log.userId,
          title: `${log.resource} deleted`,
          message: `Your ${log.resource} has been deleted`,
          type: "system",
          autoGenerated: true,
        };
        break;

      default:
        return; // No notification for other actions
    }

    // Don’t create notifications for system-level actions
    if (notificationData.userId) {
      await Notification.create({
        ...notificationData,
        timestamp: new Date(),
      });
    }
  } catch (error) {
    console.warn("⚠️ Auto-notification creation failed:", error.message);
  }
};

/**
 * For logging actions with detailed request data.
 */
export const logWithDetails = (action, resourceType, customDetails) => {
  return async (req, res, next) => {
    const originalSend = res.send;

    res.send = function (data) {
      if (res.statusCode >= 200 && res.statusCode < 300) {
        const validUserId =
          req.user && mongoose.isValidObjectId(req.user._id)
            ? req.user._id
            : null;

        Log.create({
          userId: validUserId,
          userName: req.user?.name || "System",
          userEmail: req.user?.email || "system@lfc.com",
          action,
          resource: resourceType,
          details: customDetails || `${action} ${resourceType}`,
          resourceId: req.params.courseId || req.params.id || req.body._id,
          ipAddress: req.ip,
          userAgent: req.get("User-Agent"),
          status: "success",
          timestamp: new Date(),
          additionalData: req.body,
        })
          .then(async (log) => await createNotificationFromLog(log, req))
          .catch((error) =>
            console.warn("⚠️ Failed to log action:", error.message)
          );
      }

      return originalSend.call(this, data);
    };

    next();
  };
};
